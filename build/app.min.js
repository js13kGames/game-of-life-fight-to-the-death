function getEl(e){return document.querySelector(e)}function init(e){generation=0,cellnum={},oranges=0,greens=0,dead=0,bothtribes=+form.bothtribes.value,checking=+form.checking.value,maxGen=getGenNumber(+form.gennum.value),S=Math.floor(windowW/colN),rowN=Math.floor(windowH/S),W=S*colN,H=S*rowN,dW=(windowW-W)/2,dH=(windowH-H)/2,colHN=(colN-1)/2,halfW=S*colHN,maxLС=getCellsNumber(P),informer=new Informer,game.width=W,game.height=H,grid.width=W,grid.height=H,game.style.left=dW+"px",game.style.top=dH+"px",grid.style.left=dW+"px",grid.style.top=dH+"px",pane.style.top=dH+"px",pane.style.right=dW+"px",pane.style.width=halfW+"px",pane.style.height=H+"px",form.live.value=maxLС,form.gennumO.value=maxGen.toString(),bothtribes?(orangeArr=getEmptyArray(colHN,rowN),greenArr=getEmptyArray(colHN,rowN),cellnum.greens=0,cellnum.oranges=0):(orangeArr=getEmptyArray(colHN,rowN),greenArr=getTribeArray(colHN,rowN,2),cellnum=checkCellNum(greenArr)),drawStage(orangeArr,"left"),gridOn&&drawGrid(S,colN,rowN,!0),e&&remClass(pane,"hidden")}function getCellsNumber(e){return Math.floor(colHN*rowN*e)}function getGenNumber(e){return e?e:1/0}function Informer(){var e=this,r=H/8,n=r/1.2,a=(H-r)/2,t=a+r/2;e.msgOn=!1,e.drawScore=function(e){var o,g,i,l,s=Math.max(e.oranges,e.greens),c=s+":"+s;gс.save(),gс.font=n+"px fantasy",nw=gс.measureText(c).width+r,o=(W-nw)/2,i=o+nw/2,g=i-r/4,l=i+r/4,gс.textBaseline="middle",gс.fillStyle="#5A1F00",gс.lineWidth=5,gс.strokeStyle="#FDE792",gс.fillRect(o,a,nw,r),gс.strokeRect(o,a,nw,r),gс.fillStyle="#D1570D",gс.textAlign="end",gс.fillText(e.oranges,g,t),gс.textAlign="start",gс.fillStyle="#477725",gс.fillText(e.greens,l,t),gс.textAlign="center",gс.fillStyle="#FDE792",gс.fillText(":",i,t),gс.font=n/2+"px sans-serif",gс.fillText("G"+generation,i,t+n),gс.restore()},e.drawMessage=function(o){e.msgOn=!0,gс.save(),gс.font=n/2+"px sans-serif";var g=gс.measureText(o).width,i=(W-g)/2;gс.textBaseline="middle",gс.fillStyle="#5A1F00",gс.lineWidth=5,gс.strokeStyle="#FDE792",gс.fillRect(i,a,g+r/2,r),gс.strokeRect(i,a,g+r/2,r),gс.fillStyle="#FDE792",gс.textAlign="start",gс.fillText(o,i+r/4,t),gс.restore()}}function getEmptyArray(e,r){for(var n,a=[],t=0;e>t;t++)for(a[t]=new Array(r),n=0;r>n;)a[t][n++]=0;return a}function getTribeArray(e,r,n){for(var a,t=getInitArray(e,r,n),o=[];t.length;)a=t.splice(0,r),o.push(a);return o}function getInitArray(e,r,n){var a,t,o=e*r-maxLС,g=new Array(maxLС),i=new Array(o);for(t=0;maxLС>t;)g[t++]=n;for(t=0;o>t;)i[t++]=0;return a=g.concat(i),shuffle(a)}function joinArrays(e,r){for(var n=e[0].length,a=new Array(n),t=0;n>t;)a[t++]=0;return e.concat([a],r)}function shuffle(e){for(var r,n=e.length;n;)r=Math.floor(Math.random()*n--),e[n]=[e[r],e[r]=e[n]][0];return e}function gameInit(){addClass(pane,"hidden"),gridOn&&drawGrid(S,colN,rowN,"both"),drawStage(greenArr,"right"),drawStage(orangeArr,"left"),informer.drawMessage("Hit the spacebar or any arrowes when you're done."),gamestarted=!0,mTimeout=setTimeout(function(){informer.msgOn=!1,gridOn?gridOn&&drawGrid(S,colN,rowN,"both"):gс.clearRect(0,0,W,H)},1e3)}function startGame(e){bf1=getEmptyArray(colN,rowN),bf2=joinArrays(orangeArr,greenArr),gridOn&&drawGrid(S,colN,rowN),drawStage(bf2),mTimeout=setTimeout(function(){showMustGoOn(e)},1e3)}function drawStage(e,r){var n,a=e.length,t=0,o=0;for("right"===r&&(o=halfW+S);a>t;t++)for(n=0;rowN>n;n++)drawCell(o+t*S,n*S,e[t][n])}function drawGrid(e,r,n,a){var t,o,g=a?halfW:W,i=a?colHN+1:r+1,l=0;for(gс.strokeStyle=CLRS[3],gс.clearRect(0,0,W,H);i>l;l++)t=l*e,drawLine(t,0,t,H);for(l=0;n+1>l;l++)t=l*e,drawLine(0,t,g,t);if("both"===a){for(o=halfW+S,l=0;i>l;l++)t=o+l*e,drawLine(t,0,t,H);for(l=0;n+1>l;l++)t=l*e,drawLine(o,t,o+g,t)}}function drawLine(e,r,n,a){gс.beginPath(),gс.moveTo(e,r),gс.lineTo(n,a),gс.stroke()}function drawCell(e,r,n){c.fillStyle=CLRS[n],c.fillRect(e,r,S,S)}function showMustGoOn(e){informer.msgOn&&(clearTimeout(mTimeout),informer.msgOn=!1,gridOn?drawGrid(S,colN,rowN):gс.clearRect(0,0,W,H)),e?(animation=!animation,animation&&requestAnimationFrame(nextGen)):nextGen()}function nextGen(){for(var e,r=0;colN>r;r++)for(e=0;rowN>e;e++)bf1[r][e]=calcState(r,e),drawCell(r*S,e*S,bf1[r][e]);bf1=[bf2,bf2=bf1][0],generation++,animation?(checking&&(bf2.check&&(animation=checkjson!==JSON.stringify(bf2),bf2.check=!1),generation%25===0&&(animation=checkCellNum(bf2,!0),bf2.check=!0,checkjson=JSON.stringify(bf2)),animation||displayResults()),generation>=maxGen?(animation=!animation,displayResults()):requestAnimationFrame(nextGen)):generation>=maxGen&&displayResults()}function checkState(){cellnum=checkCellNum(bf2),informer.drawScore(cellnum)}function displayResults(){gamestarted=!1,cellnum=checkCellNum(bf2),informer.drawScore(cellnum)}function checkCellNum(e,r){for(var n,a=e.length,t=0,o={dead:0,oranges:0,greens:0};a>t;t++)for(n=0;rowN>n;n++)e[t][n]?1===e[t][n]?o.oranges++:o.greens++:o.dead++;return r?!!o.oranges&&!!o.greens:o}function calcState(e,r){for(var n,a=0>e-1?colN-1:e-1,t=e+1>colN-1?0:e+1,o=0>r-1?rowN-1:r-1,g=r+1>rowN-1?0:r+1,i=[bf2[a][o],bf2[a][r],bf2[a][g],bf2[e][o],bf2[e][g],bf2[t][o],bf2[t][r],bf2[t][g]],l=0,s=0,c=0,f=0;8>f;f++)i[f]?1===i[f]?s++:c++:l++;return n=s+c,bf2[e][r]?2>n||n>3?0:bf2[e][r]:3!==n?0:c>s?2:s>c?1:Math.floor(Math.random()+.5)}function onArrowPress(){gamestarted&&!animation&&maxGen>generation&&(generation?nextGen():startGame())}function onSpaceBarPress(){gamestarted&&maxGen>generation&&(generation?showMustGoOn(!0):startGame(!0))}function generateArr(){bothtribes?(orangeArr=getTribeArray(colHN,rowN,1),greenArr=getTribeArray(colHN,rowN,2),cellnum=checkCellNum(greenArr),drawStage(greenArr,"right"),drawStage(orangeArr,"left"),gridOn&&drawGrid(S,colN,rowN,"both")):(orangeArr=getTribeArray(colHN,rowN,1),drawStage(orangeArr,"left"),cellnum.oranges=checkCellNum(orangeArr).oranges,gridOn&&drawGrid(S,colN,rowN,"left"))}function resetArr(){bothtribes?(orangeArr=getEmptyArray(colHN,rowN),greenArr=getEmptyArray(colHN,rowN),cellnum.greens=0,cellnum.oranges=0,drawStage(greenArr,"right"),drawStage(orangeArr,"left"),gridOn&&drawGrid(S,colN,rowN,"both")):(orangeArr=getEmptyArray(colHN,rowN),drawStage(orangeArr,!0),gridOn&&drawGrid(S,colN,rowN,"left"))}function applyConfig(){for(var e=form.getElementsByTagName("p"),r=0;r<e.length;r++)e[r].style.opacity=1;colN=+form.colnum.value,P=+form.popdens.value,maxGen=+form.gennum.value,gridOn=+form.showgrid.value,init()}function onSpanMouseUp(e){var r=document.getElementById(e.target.id.replace("nav","pane")),n=0;if(hasClass(e.target,"inactive-btn")){for(;n<navbtns.length;n++)addClass(navbtns[n],"inactive-btn");for(remClass(e.target,"inactive-btn"),n=0;n<panels.length;n++)addClass(panels[n],"hidden");remClass(r,"hidden")}}function onCanvasMouseUp(){dragging=!1}function onCanvasMouseDown(e){dragging=!0,onCanvasMouseMove(e)}function onCanvasMouseMove(e){if(dragging&&!generation){var r=getPointerPos(e.target,e),n=Math.floor(r.x/S),a=Math.floor(r.y/S);r.x<halfW?(cache.oranges.i!==n||cache.oranges.j!==a)&&(orangeArr[n][a]=orangeArr[n][a]?0:1,orangeArr[n][a]?(cellnum.oranges++,cellnum.oranges>maxLС&&(cellnum.oranges--,orangeArr[n][a]=0)):cellnum.oranges--,cache.oranges.i=n,cache.oranges.j=a,drawStage(orangeArr,"left")):bothtribes&&r.x>halfW+S&&(n-=colHN+1,(cache.greens.i!==n||cache.greens.j!==a)&&(greenArr[n][a]=greenArr[n][a]?0:2,greenArr[n][a]?(cellnum.greens++,cellnum.greens>maxLС&&(cellnum.greens--,greenArr[n][a]=0)):cellnum.greens--,cache.greens.i=n,cache.greens.j=a,drawStage(greenArr,"right")))}}function getCellCoord(e){Math.round(e.x/S),Math.round(e.y/S)}function hasClass(e,r){return(" "+e.className+" ").indexOf(" "+r+" ")>-1}function addClass(e,r){hasClass(e,r)||(e.className+=" "+r)}function remClass(e,r){e.className=e.className.replace(" "+r,"")}function getPointerPos(e,r){var n=e.getBoundingClientRect();return{x:r.pageX-n.left,y:r.pageY-n.top}}function pointInRect(e,r){return inRange(e.x,r.x,r.x+r.w)&&inRange(e.y,r.y,r.y+r.h)}function inRange(e,r,n){return e>=Math.min(r,n)&&e<=Math.max(r,n)}var colN=51,P=.5,S,rowN,orangeArr,playerLC,greenArr,enemyLC,bf1,bf2,maxLС,W,H,dW,dH,halfW,colHN,maxGen,CLRS=["#5A1F00","#D1570D","#477725","rgba(0,0,0,1)"],animation=!1,gridOn=!0,cache={greens:{i:1e3,j:1e3},oranges:{i:1e3,j:1e3}},checkjson,checking,gamestarted,mTimeout,bothtribes,dragging,cellnum,oranges,greens,dead,generation,game=getEl("#game"),grid=getEl("#grid"),pane=getEl("#pane"),apply=getEl("#apply"),rulesBtn=getEl("#nav-rules"),optionBtn=getEl("#nav-option"),navbtns=document.getElementsByClassName("btn"),panels=document.getElementsByClassName("panels"),form=document.forms[0],c=game.getContext("2d"),gс=grid.getContext("2d"),b=document.body,windowW=window.innerWidth,windowH=window.innerHeight,informer;b.onkeyup=function(e){switch(e.keyCode){case 32:onSpaceBarPress();break;case 27:animation||init(!0);break;case 39:onArrowPress();break;case 37:onArrowPress();break;case 38:onArrowPress();break;case 40:onArrowPress()}},b.onmouseup=function(e){if("SPAN"===e.target.nodeName)onSpanMouseUp(e);else if("CANVAS"===e.target.nodeName)onCanvasMouseUp(e);else if("DIV"===e.target.nodeName)switch(e.target.id){case"apply":applyConfig();break;case"start":gameInit();break;case"generate":generateArr();break;case"reset":resetArr();break;default:return!1}},grid.onmousedown=onCanvasMouseDown,grid.onmousemove=onCanvasMouseMove,init();
//# sourceMappingURL=data:application/json;base64,